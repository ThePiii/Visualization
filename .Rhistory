y = c(3, 7, 6, 2, 3, 2)
m = c(15, 13, 9, 12, 13, 10)
data1 = data.frame(cbind(treatment, surgical_risk, y, m))
data1$treatmentft = C(factor(data1$treatment), treatment)
data1$surgical_riskft = C(factor(data1$surgical_risk), treatment)
data1$resp = cbind(data1$y, data1$m-data1$y)
Model1 = glm(resp~treatmentft + surgical_riskft, family=binomial, data=data1)
summary(Model1)
summary(Model1)
-1.0410 + 1.1569
fv1[2]
0.1159 + c(-1, 1)*1.96*sqrt(v[2,2])
1/(1+e^(-0.1159))
1/(1+exp(-0.1159))
fv1[2]
'95%CI of the fitted value'
fv1[2] + c(-1, 1)*1.96*sqrt(v[2,2])
age = c(1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6)
city = c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4)
y = c(11, 11, 11, 10, 11, 10, 13, 6, 15, 10, 12, 2, 4, 8, 7, 11, 9, 12, 5, 7, 10, 14, 8, 7)
pop = c(3059, 800, 710, 581, 509, 605, 2879, 1083, 923, 834, 634, 782, 3142, 1050, 895, 702, 535, 659, 2520, 878, 839, 631, 539, 619)
data2 = data.frame(cbind(age, city, y, pop))
data2$ageft = C(factor(data2$age))
data2$cityft = C(factor(data2$city))
Model2 = glm(y~ageft + cityft + offset(log(pop)), family=poisson, data=data2)
summary(Model2)
fv2 = Model2$fitted.values
fv2matrix = matrix(fv2, nrow=6, ncol=4, byrow=T)
fv2matrix[2, 3]
fv2
Model2$
s
fv2matrix
Model2i = glm(y~ageft * cityft + offset(log(pop)), family=poisson, data=data2)
summary(Model2i)
1-pchisq(Model2i$deviance-Model2$deviance,Model2i$df.residual-Model2$df.residual)
1-pchisq(Model2i$deviance-Model2$deviance, Model2i$df.residual-Model2$df.residual)
1-pchisq(Model2i$deviance-Model2$deviance, Model2i$df.residual-Model2$df.residual)
1-pchisq(Model2i$deviance-Model2$deviance, Model2i$df.residual-Model2$df.residual)
1-pchisq(Model2$deviance-Model2i$deviance, Model2$df.residual-Model2i$df.residual)
1-pchisq(Model2$deviance-Model2i$deviance, Model2$df.residual-Model2i$df.residual)
data2
Model2c1 = glm(y~ageft+cityft+offset(log(pop)), subset(age==5),family=poisson, data = data2)
Model2c1 = glm(y~ageft+cityft+offset(log(pop)), subset=(age==5),family=poisson, data = data2)
Model2c1 = glm(y~ageft+cityft+offset(log(pop)), subset=(age==5),family=poisson, data = data2, epsilon = 1e-004)
dataCage5 = subset.data.frame(data2, age==5)
dataCage5
Model2c1 = glm(y~cityft, family=poisson, data=dataCage5)
summary(Model2c1)
Model2c1$fitted.values
Model2c1 = glm(y~cityft+offset(log(pop)), family=poisson, data=dataCage5)
summary(Model2c1)
summary(Model2)
Model2$linear.predictors
Model2$control(age==5)
Model2$control
tmp2 = summary(Model2)
tmp2$coefficients
tmp2$coefficients[5, 1]
betahat = c(tmp2$coefficients[5, 1], tmp2$coefficients[1, 1])
betahat
e(betahat)
exp(betahat)
tmp2 = summary(Model2)
betahat = c(tmp2$coefficients[5, 1], tmp2$coefficients[1, 1])
# relative increase
(exp(betahat)[2] - exp(betahat)[1])/exp(betahat[2])
tmp2 = summary(Model2)
betahat = c(tmp2$coefficients[5, 1], tmp2$coefficients[1, 1])
# relative increase
(exp(betahat[2]) - exp(betahat[1]))/exp(betahat[2])
tmp2 = summary(Model2)
betahat = c(tmp2$coefficients[5, 1], tmp2$coefficients[1, 1])
# relative increase
(exp(betahat[1]) - exp(betahat[2]))/exp(betahat[1])
var = tmp2$cov.unscaled
var
vartable = tmp2$cov.unscaled
v = c(vartable[2, 2], vartable[5, 5], vartable[5, 2])
var = v[1] + v[2] - 2 * v[3]
var
vartable = tmp2$cov.unscaled
v = c(vartable[2, 2], vartable[5, 5], vartable[5, 2])
var = v[1] + v[2] - 2 * v[3]
# 95% CI
exp((betahat[1]-betahat[2]) + c(-1, 1)*1.96*sqrt(var))
vartable = tmp2$cov.unscaled
v = c(vartable[2, 2], vartable[5, 5], vartable[5, 2])
var = v[1] + v[2] - 2 * v[3]
# 95% CI
1 - exp((betahat[2]-betahat[1]) + c(-1, 1)*1.96*sqrt(var))
install.packages('tinytex')
install.packages("tinytex")
install.packages('evaluate')
install.packages("evaluate")
install.packages('evaluate')
install.packages('evaluate')
library(ggplot2)
library(nCov2019)
library(forcats)
library(dplyr)
library(reshape)
library(ggrepel)
res = query()
history = res$historical
global = history['global']
latest = res$latest
View(history)
summary(latest)
summary(latest$table)
23529.2/1188004
View(global)
# 死亡率
global_death_rate = global %>% group_by(date)
View(global_death_rate)
time = as.Date('2021-11-30')
# 死亡率
global_death_rate = global %>%
group_by(date) %>%
summarise(date = date,
global, death_rate = sum(deaths)/sum(cases)) %>%
filter(date<=time)
# 死亡率
global_death_rate = global %>%
group_by(date) %>%
summarise(date = date,
death_rate = sum(deaths)/sum(cases)) %>%
filter(date<=time)
View(global_death_rate)
# 死亡率
global_death_rate = global %>%
group_by(date) %>%
summarise(date = date,
death_rate = sum(deaths)/sum(cases)) %>%
filter(date<=time) %>%
dinstinct()
# 死亡率
global_death_rate = global %>%
group_by(date) %>%
summarise(date = date,
death_rate = sum(deaths)/sum(cases)) %>%
filter(date<=time) %>%
distinct()
View(global_death_rate)
ggplot(global_death_rate, aes(x=date, y=death_rate, size=1, color=death_rate)) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate, color=death_rate)) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate, color=blue)) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate, color=;blue)) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate, color='blue')) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate) + geom_line(aes( color='blue')))
ggplot(global_death_rate, aes(x=date, y=death_rate) + geom_line(aes(color='blue')))
ggplot(global_death_rate, aes(x=date, y=death_rate)) + geom_line(aes(color='blue'))
ggplot(global_death_rate, aes(x=date, y=death_rate)) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate, color = death_rate)) + geom_line()
ggplot(global_death_rate, aes(x=date, y=death_rate, color = death_rate)) + geom_line()
province = history$province
Hubei = filter(province, province=='hubei', date<=as.Date('2020-04-30'))
ggplot(Hubei, aes(x = date, y = cases),) + geom_point(aes(color=cases))
View(Hubei)
hubei_death_rate = Hubei %>%
group_by(date) %>%
summarise(date = date,
death_rate = sum(deaths)/sum(cases)) %>%
distinct()
ggplot(hubei_death_rate, aes(x=date, y=death_rate, color = death_rate)) + geom_line()
View(global_death_rate)
max(global_death_rate)
max(global_death_rate[death_rate])
max(global_death_rate['death_rate'])
max(hubei_death_rate['death_rate'])
seir<-function(time, state, pars){
with(as.list(c(state, pars)),{
dS <-- S * beta * I/N
dE <- S * beta * I/N - E * k
dI <- E * k - I * (mu + gamma)
dR <- I * gamma
dN <- dS + dE + dI + dR
list(c(dS,dE,dI,dR,dN))
})
}
N <- 3E8 # 总人口
I0 <- 89 # 期初感染数
E0 <- 0 # 期初潜伏数
RM0 <- 0 # 期初移除数
S0 = N - I0 - RM0 # 期初易感人数
init<-c(S = S0, E = E0, I = I0, R = RM0, N = N)
time <- seq(0, 150, 1)
pars<-c(
beta = 0.55,	#有效接触率
k = 1,	#潜伏到感染的转化率
gamma = 0.2,	#RECOVERY
mu=0.02	#感染期死亡率
)
res.seir<-as.data.frame(lsoda(y = init, times = time, func = seir, parms = pars))
ggplot(res.seir) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
geom_line(aes(x = time, y = N, col = '1 人口'))+
theme_light(base_family = 'Kai') +
scale_colour_manual("",
values=c(
"2 易感" = "cornflowerblue", "3 潜伏" = "orange",
"4 感染" = "darkred", "5 移除" = "forestgreen",
"1 人口" = "black"
)
) +
scale_y_continuous('')
res.seir<-as.data.frame(lsoda(y = init, times = time, func = seir, parms = pars))
res.seir<-as.data.frame(lsoda(y = init, times = time, func = seir, parms = pars))
install.packages('quantreg')
install.packages("quantreg")
res.seir<-as.data.frame(lsoda(y = init, times = time, func = seir, parms = pars))
rm(list=ls())
library(ggplot2)
library(nCov2019)
library(forcats)
library(dplyr)
library(reshape)
library(ggrepel)
library(GGally)
# 截面数据
res = query()
global = history['global']
history = res$historical
global = history['global']
latest = res$latest
detail = latest$detail
SubDetail<-subset(detail, country %in% c("Canada","UK","USA","New Zealand","Iceland","Japan","Luxembourg","Netherlands","Switzerland","Russia","France","India","China","Mexico","Brazil","Australia","S.Korea","Germany","Afghanistan","Iran","Israel","Singapore","South Africa","Italy","Algeria","Argentina"))
ggplot(latest$table,aes(x=cases, y=deaths))+geom_point()+geom_smooth(method='lm')
# 尽管散点大致在一条直线上，可以看出有很多点明显地偏离了拟合值。
SubDetail = tibble(SubDetail)
ggplot(SubDetail, aes(x=reorder(countryInfo,deaths/cases), y=deaths/cases)) +   geom_bar(stat="identity", fill="lightblue", colour="black")
View(SubDetail)
load("C:/Users/Piii/Documents/WeChat Files/wxid_ikgqllb7oajk21/FileStorage/File/2021-12/.RData")
ggplot(SubDetail, aes(x=reorder(countryInfo,testsPerOneMillion), y=testsPerOneMillion)) +   geom_bar(stat="identity", fill="lightblue", colour="black")
var(SubDetail$testsPerOneMillion)/mean(SubDetail$testsPerOneMillion)= 1677329
var(SubDetail$testsPerOneMillion)/mean(SubDetail$testsPerOneMillion)
load("C:/Users/Piii/Documents/WeChat Files/wxid_ikgqllb7oajk21/FileStorage/File/2021-12/(1).RData")
USA<-subset(histable,country=="USA")
ggplot(USA,aes(x=date, y=cases))+geom_point()
library(ggplot2)
library(nCov2019)
library(forcats)
library(dplyr)
library(reshape)
library(ggrepel)
library(GGally)
ggplot(USA,aes(x=date, y=cases))+geom_point()
developed = filter(histable, country %in% c('USA', 'UK', 'Germany','Australia'))
View(UK)
developed_reshape = melt.data.frame(developed, id.vars=c('country','date'))
View(developed_reshape)
View(developed_reshape)
View(UK)
developed_reshape = melt.data.frame(developed, id.vars=c('date','cases'))
View(developed_reshape)
View(developed)
developed_reshape = melt.data.frame(developed[c(1:3)], id.vars=c('date','cases'))
View(developed_reshape)
View(developed)
developed = filter(histable, country %in% c('USA', 'UK', 'Germany','Australia'))
View(developed)
View(detail)
View(developed)
developed_reshape = melt.data.frame(developed[c(1:3)], id.vars=c('date','country'))
View(developed_reshape)
ggplot(developed, aes(x=date, y=value, group=cases), group_by(country)) + geom_point()
ggplot(developed_reshape, aes(x=date, y=value, group=cases), group_by(country)) + geom_point()
View(developed_reshape)
ggplot(developed_reshape, aes(x=date, y=value, group=country), group_by(country)) + geom_point()
ggplot(developed_reshape, aes(x=date, y=value, group=country, color=country), group_by(country)) + geom_point()
p1 = ggplot(USA,aes(x=date, y=cases))+geom_point()
p2 = ggplot(UK,aes(x=date, y=cases))+geom_point()
p3 =ggplot(subset(histable,country=="Germany"),aes(x=date, y=cases))+geom_point()
p4 = ggplot(subset(histable,country=="Australia"),aes(x=date, y=cases))+geom_point()
multiplot(p1, p2, p3, p4, cols=2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
p1 = ggplot(USA,aes(x=date, y=cases))+geom_point()+labs(title='USA',
x = 'Date',
y = 'Cases')
p2 = ggplot(UK,aes(x=date, y=cases))+geom_point() + labs(title='UK',
x = 'Date',
y = 'Cases')
p3 =ggplot(subset(histable,country=="Germany"),aes(x=date, y=cases))+geom_point()+labs(title='USA',
x = 'Date',
y = 'Cases')
p4 = ggplot(subset(histable,country=="Australia"),aes(x=date, y=cases))+geom_point()+labs(title='USA',
x = 'Date',
y = 'Cases')
p4 = ggplot(subset(histable,country=="Australia"),aes(x=date, y=cases))+geom_point()+labs(title='Australia',
x = 'Date',
y = 'Cases')
p3 =ggplot(subset(histable,country=="Germany"),aes(x=date, y=cases))+geom_point()+labs(title='Germany',
x = 'Date',
y = 'Cases')
multiplot(p1, p2, p3, p4, cols=2)
p1 = ggplot(USA,aes(x=date, y=cases))+geom_point(color=2)+labs(title='USA',
x = 'Date',
y = 'Cases')
UK<-subset(histable,country=="UK")
p2 = ggplot(UK,aes(x=date, y=cases))+geom_point(color=3) + labs(title='UK',
x = 'Date',
y = 'Cases')
p3 =ggplot(subset(histable,country=="Germany"),aes(x=date, y=cases))+geom_point(color=4)+labs(title='Germany',
x = 'Date',
y = 'Cases')
p4 = ggplot(subset(histable,country=="Australia"),aes(x=date, y=cases))+geom_point(color=5)+labs(title='Australia',
x = 'Date',
y = 'Cases')
multiplot(p1, p2, p3, p4, cols=2)
# 部分阿美
SubUSA<-subset(USA,date<"2021-07-01")
ggplot(SubUSA,aes(x=date, y=cases))+geom_point()
ggplot(SubUSA,aes(x=date, y=cases， color=2))+geom_point()
ggplot(SubUSA,aes(x=date, y=cases, color=2))+geom_point()
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point()
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point()
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2020-02-01'), xmax=as.Date('2020-07-01'), ymin=0, ymax=350000000, alpha=.1, fill="blue")))
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2020-02-01'), xmax=as.Date('2020-07-01'), ymin=0, ymax=350000000, alpha=.1, fill="blue")
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=350000000, alpha=.1, fill="blue")
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=35000000, alpha=.1, fill="blue")
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=35000000, alpha=.1, fill="blue") +
labs(title='USA', x='Date',y='Cases')
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=35000000, alpha=.1, fill="blue") +
labs(title='USA', x='Date',y='Cases')
ggplot(SubUSA,aes(x=date, y=cases-recovered, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=35000000, alpha=.1, fill="blue") +
labs(title='USA', x='Date',y='Cases')
View(USA)
ggplot(SubUSA,aes(x=date, y=cases-recovered, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=35000000, alpha=.1, fill="blue") +
labs(title='USA', x='Date',y='Cases')
setwd('D:/Study/研究生/数据处理与可视化/课设')
covid = read.csv('owid-covid-data.csv', header=TRUE)
View(covid)
# USA
USA_covid = filter(covid, location = United States)
# USA
USA_covid = filter(covid, location = 'United States', as.Date(date)<as.Date('2021-07-01'))
# USA
USA_covid = filter(covid, location == 'United States', as.Date(date)<as.Date('2021-07-01'))
View(USA_covid)
ggplot(SubUSA,aes(x=date, y=cases, color=cases))+geom_point() +
annotate("rect", xmin=as.Date('2021-02-01'), xmax=as.Date('2021-07-01'), ymin=0, ymax=35000000, alpha=.1, fill="blue") +
labs(title='USA', x='Date',y='Cases')
SI <- function(time, state, parameters) {
par = as.list(c(state, parameters))
with(par, {
dI = lambda* S * I
list(c(dS, dI))
})
}
library(deSolve)
init = c(S=0.99, I =0.01)
T = 0:99
para=setNames(a, c("lambda"))
lambda=0.29132
para=setNames(lambda, 'lambda')
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
SI <- function(time, state, parameters) {
par = as.list(c(state, parameters))
with(par, {
dI = lambda* S * I
dS = -lambda* S * I
list(c(dS, dI))
})
}
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
plot(time,fit$I)
lambda=5
para=setNames(lambda, 'lambda')
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
plot(time,fit$I)
plot(fit$I)
plot(fit$I, time)
View(fit)
lambda=0.2
para=setNames(lambda, 'lambda')
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
lambda=0.002
para=setNames(lambda, 'lambda')
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
lambda=0.05
para=setNames(lambda, 'lambda')
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
lambda=0.08
para=setNames(lambda, 'lambda')
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
plot(fit$I)
View(fit)
ggplot(fit, aes(x=time, y=I)) + geom_line()
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
SIS <- function(time, state, parameters) {
par = as.list(c(state, parameters))
with(par, {
dI = lambda* S * I - miu * I
dS = -lambda* S * I + miu * I
list(c(dS, dI))
})
}
par = c(lambda, miu)
miu = 0.01
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
miu = 0.1
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
miu = 0.2
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
miu = 0.5
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
lambda=0.08
miu = 0.16
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SI, parms =para))
View(fit)
fit= data.frame(ode(y = init, times =T, func = SIS, parms =para))
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
View(fit)
SIS <- function(time, state, parameters) {
par = as.list(c(state, parameters))
with(par, {
dI = lambda* S * I - miu * I
dS = -lambda* S * I + miu * I
list(c(dS, dI))
})
}
init = c(S=0.99, I =0.01)
T = 0:99
lambda=0.08
miu = 0.16
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SIS, parms =para))
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
miu = 0.06
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SIS, parms =para))
View(fit)
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
miu = 0.01
par = c(lambda, miu)
para=setNames(par, c('lambda','miu'))
fit= data.frame(ode(y = init, times =T, func = SIS, parms =para))
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SImodel', x='time', y='Infective')
ggplot(fit, aes(x=time, y=I)) + geom_line() + labs(title='SISmodel', x='time', y='Infective')
latest$table
head(latest$table)
